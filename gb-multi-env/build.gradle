apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'application'

def jdkVersion = 1.7
sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.0'
}

eclipse {
    pathVariables 'GRADLE_USER_HOME': gradle.gradleUserHomeDir
    classpath.file {
        whenMerged { classpath ->
            classpath.entries.findAll { entry -> entry.kind == 'output' }*.path = 'build/bin'
        }
    }
}

mainClassName = 'com.github.ksoichiro.groovy.example.Example'
eclipse.project.name = 'gb-multi-env'

archivesBaseName = 'app'

run {
    classpath "${project.buildDir}/resources/main"
}

jar {
    excludes = ['**/*.groovy']
    manifest {
        attributes "Main-Class": mainClassName
    }
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

def copyFiles(String env) {
    copy {
        from "${project.buildDir}/libs"
        into "${project.buildDir}/copy/tmp/${env}/app/libs"
        include '**/*.jar'
    }
    copy {
        from 'src/main/resources'
        into "${project.buildDir}/copy/tmp/${env}/app/conf"
        include '**/*.groovy'
    }
    copy {
        from "src/${env}/resources"
        into "${project.buildDir}/copy/tmp/${env}/app/conf"
        include '**/*.groovy'
    }
}

Collection<String> environments = [
        'staging',
        'production'
]

environments.each { String env ->
    task("zip${env.capitalize()}", type: Zip, group: "release") {
        appendix = env
        from "${project.buildDir}/copy/tmp/${env}"
    }

    task("emulate${env.capitalize()}", dependsOn: "pack${env.capitalize()}", group: "release") << {
        copy {
            from zipTree("${buildDir}/distributions/${archivesBaseName}-${env}.zip")
            into "${buildDir}/emulation/${env}"
        }
        String cwd = "${buildDir}/emulation/${env}/${archivesBaseName}"
        javaexec {
            main mainClassName as String
            classpath file("${cwd}/libs/${archivesBaseName}.jar"), file("${cwd}/conf")
            workingDir cwd
        }
    }

    task("pack${env.capitalize()}", dependsOn: jar, group: "release") << {
        copyFiles(env)
        tasks."zip${env.capitalize()}".execute()
    }
}
